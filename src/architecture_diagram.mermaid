classDiagram
    class workflow {
        +isWorkflowRunning(context)
        +isWorkflowPaused(context)
        +isBackgroundMode(context)
        +setBackgroundMode(context, enabled)
        +getIterationCount(context)
        +runWorkflow(context, action)
        +pauseWorkflow(context)
        +resumeWorkflow(context)
        +stopWorkflow(context)
    }
    
    class WorkflowManager {
        -isRunning: boolean
        -isPaused: boolean
        -backgroundMode: boolean
        -iterationCount: number
        -currentWorkflowPromise: Promise
        +getInstance(context): WorkflowManager
        +isWorkflowRunning(): boolean
        +isWorkflowPaused(): boolean
        +isBackgroundMode(): boolean
        +setBackgroundMode(enabled): void
        +getIterationCount(): number
        +runWorkflow(context, action): Promise
        -startWorkflow(context): Promise
        -restartWorkflow(context): Promise
        -continueWorkflow(context): Promise
        +pauseWorkflow(): void
        +resumeWorkflow(): void
        +stopWorkflow(): Promise
        +checkContinue(): Promise
    }
    
    class WorkflowCommandExecutor {
        -context: ExtensionContext
        -promptLoader: PromptLoader
        -statusManager: StatusManager
        -configManager: ConfigurationManager
        +sleep(ms): Promise
        +executeInitialSetup(backgroundMode): Promise
        +executeDevelopmentWorkflow(backgroundMode, iterationCount): Promise
        -executeTestWorkflow(backgroundMode, iterationMessage): Promise
        +executeContinueDevelopment(backgroundMode, iterationCount): Promise
        -sendChecklistToChat(backgroundMode): Promise
        -shouldContinueToNextIteration(): Promise
    }
    
    class ConfigurationManager {
        -EXTENSION_ID: string
        +getInstance(): ConfigurationManager
        -getConfig(): WorkspaceConfiguration
        +getBackgroundMode(): boolean
        +getAgentMode(): string
        +getPreferredModels(): string[]
        +shouldCreateBranch(): boolean
        +shouldWriteTests(): boolean
        +getMaxIterations(): number
        +getIdleTimeoutSeconds(): number
        +getCheckAgentFrequency(): number
        +getEnsureChatFrequency(): number
        +updateSetting(key, value, target): Promise
    }
    
    class PromptLoader {
        -context: ExtensionContext
        +loadPromptFile(fileName): Promise
    }
    
    class GitService {
        +createAndCheckoutBranch(branchNamePrefix): Promise
        +commitChanges(message): Promise
        +getCurrentBranch(): Promise
        -showInfo(message): void
        -showWarning(message): void
        -showError(message): void
    }
    
    class WorkflowErrors {
        WorkflowCancelledError
        WorkflowTimeoutError
        ConfigurationError
        CommunicationError
        GitOperationError
        PromptLoadError
    }
    
    class StatusManager {
        -currentState: WorkflowState
        -statusBarItem: StatusBarItem
        -lastUpdateTime: Date
        -animationFrames: string[]
        -animationIndex: number
        -animationInterval: Timeout
        -stateChangeListeners: StateChangeListener[]
        +getInstance(): StatusManager
        +initialize(context): void
        +setState(state, message): void
        +getState(): WorkflowState
        +getLastUpdateTime(): Date
        +onStateChanged(listener): Disposable
        -notifyStateChangeListeners(state, message): void
        -updateStatusBar(message): void
        -formatStateName(state): string
        -getStateEmoji(): string
        -setStatusBarColor(): void
        -getElapsedTime(): string
        -startAnimation(): void
        -stopAnimation(): void
        -showStateNotification(state, message): void
        +dispose(): void
    }
    
    class ChatUtils {
        -lastMessageTime: number
        -IDLE_THRESHOLD: number
        +ensureChatOpen(maxAttempts, delayBetweenAttempts, shouldFocus): Promise
        -focusChatTab(): Promise
        +sendChatMessage(message, backgroundMode): Promise
        -restoreFocus(tabToRestore): Promise
        +selectAIModel(modelName): Promise
        +isAgentIdle(): Promise
        +isAgentWorking(): Promise
    }
    
    class MonitoringService {
        -checkAgentTimer: Timeout
        -ensureChatTimer: Timeout
        -context: ExtensionContext
        -configManager: ConfigurationManager
        +initialize(context): void
        -setupMonitoringTimers(): void
        +clearMonitoringTimers(): void
    }
    
    class CommandRegistrar {
        +registerCommands(context): void
    }
    
    class FloatingControlsPanel {
        -panel: WebviewPanel
        -context: ExtensionContext
        -disposables: Disposable[]
        -statusBarItem: StatusBarItem
        +show(): void
        -updatePanelContent(): void
        +dispose(): void
    }
    
    class SidebarProvider {
        -_view: WebviewView
        -context: ExtensionContext
        -configManager: ConfigurationManager
        +resolveWebviewView(webviewView, context, token): void
        -_updateToggleButtonState(isRunning): Promise
        -_getHtmlForWebview(webview): string
    }
    
    class Helpers {
        +sleep(ms): Promise
        +getTimestampString(): string
        +toCamelCase(str): string
        +generateUniqueId(): string
        +retry(fn, maxAttempts, delayMs): Promise
        +getNonce(): string
        +toTitleCase(str): string
    }
    
    workflow --> WorkflowManager : Facade
    WorkflowManager --> WorkflowCommandExecutor : uses
    WorkflowManager --> ConfigurationManager : uses
    WorkflowManager ..> WorkflowErrors : throws
    WorkflowCommandExecutor --> StatusManager : updates
    WorkflowCommandExecutor --> PromptLoader : loads prompts
    WorkflowCommandExecutor --> GitService : performs git operations
    WorkflowCommandExecutor --> ChatUtils : sends messages
    WorkflowCommandExecutor --> ConfigurationManager : uses
    WorkflowCommandExecutor ..> Helpers : utility functions
    CommandRegistrar --> WorkflowManager : manages
    CommandRegistrar --> ChatUtils : uses
    CommandRegistrar --> ConfigurationManager : uses
    FloatingControlsPanel --> WorkflowManager : controls
    SidebarProvider --> WorkflowManager : controls
    SidebarProvider --> ConfigurationManager : uses
    SidebarProvider --> StatusManager : monitors
    MonitoringService --> ChatUtils : uses
    MonitoringService --> ConfigurationManager : uses
    MonitoringService --> WorkflowManager : monitors